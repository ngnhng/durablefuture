// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aggregate_test

import (
	"context"
	"github.com/DeluxeOwl/chronicle/aggregate"
	"github.com/DeluxeOwl/chronicle/event"
	"github.com/DeluxeOwl/chronicle/version"
	"sync"
)

// RepositoryMock is a mock implementation of aggregate.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked aggregate.Repository
//		mockedRepository := &RepositoryMock{
//			GetFunc: func(ctx context.Context, id TID) (R, error) {
//				panic("mock out the Get method")
//			},
//			GetVersionFunc: func(ctx context.Context, id TID, selector version.Selector) (R, error) {
//				panic("mock out the GetVersion method")
//			},
//			LoadAggregateFunc: func(ctx context.Context, root R, id TID, selector version.Selector) error {
//				panic("mock out the LoadAggregate method")
//			},
//			SaveFunc: func(ctx context.Context, root R) (version.Version, aggregate.CommittedEvents[E], error) {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedRepository in code that requires aggregate.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock[TID aggregate.ID, E event.Any, R aggregate.Root[TID, E]] struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id TID) (R, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(ctx context.Context, id TID, selector version.Selector) (R, error)

	// LoadAggregateFunc mocks the LoadAggregate method.
	LoadAggregateFunc func(ctx context.Context, root R, id TID, selector version.Selector) error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, root R) (version.Version, aggregate.CommittedEvents[E], error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID TID
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID TID
			// Selector is the selector argument value.
			Selector version.Selector
		}
		// LoadAggregate holds details about calls to the LoadAggregate method.
		LoadAggregate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Root is the root argument value.
			Root R
			// ID is the id argument value.
			ID TID
			// Selector is the selector argument value.
			Selector version.Selector
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Root is the root argument value.
			Root R
		}
	}
	lockGet           sync.RWMutex
	lockGetVersion    sync.RWMutex
	lockLoadAggregate sync.RWMutex
	lockSave          sync.RWMutex
}

// Get calls GetFunc.
func (mock *RepositoryMock[TID, E, R]) Get(ctx context.Context, id TID) (R, error) {
	if mock.GetFunc == nil {
		panic("RepositoryMock.GetFunc: method is nil but Repository.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  TID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedRepository.GetCalls())
func (mock *RepositoryMock[TID, E, R]) GetCalls() []struct {
	Ctx context.Context
	ID  TID
} {
	var calls []struct {
		Ctx context.Context
		ID  TID
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *RepositoryMock[TID, E, R]) GetVersion(ctx context.Context, id TID, selector version.Selector) (R, error) {
	if mock.GetVersionFunc == nil {
		panic("RepositoryMock.GetVersionFunc: method is nil but Repository.GetVersion was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ID       TID
		Selector version.Selector
	}{
		Ctx:      ctx,
		ID:       id,
		Selector: selector,
	}
	mock.lockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	mock.lockGetVersion.Unlock()
	return mock.GetVersionFunc(ctx, id, selector)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//
//	len(mockedRepository.GetVersionCalls())
func (mock *RepositoryMock[TID, E, R]) GetVersionCalls() []struct {
	Ctx      context.Context
	ID       TID
	Selector version.Selector
} {
	var calls []struct {
		Ctx      context.Context
		ID       TID
		Selector version.Selector
	}
	mock.lockGetVersion.RLock()
	calls = mock.calls.GetVersion
	mock.lockGetVersion.RUnlock()
	return calls
}

// LoadAggregate calls LoadAggregateFunc.
func (mock *RepositoryMock[TID, E, R]) LoadAggregate(ctx context.Context, root R, id TID, selector version.Selector) error {
	if mock.LoadAggregateFunc == nil {
		panic("RepositoryMock.LoadAggregateFunc: method is nil but Repository.LoadAggregate was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Root     R
		ID       TID
		Selector version.Selector
	}{
		Ctx:      ctx,
		Root:     root,
		ID:       id,
		Selector: selector,
	}
	mock.lockLoadAggregate.Lock()
	mock.calls.LoadAggregate = append(mock.calls.LoadAggregate, callInfo)
	mock.lockLoadAggregate.Unlock()
	return mock.LoadAggregateFunc(ctx, root, id, selector)
}

// LoadAggregateCalls gets all the calls that were made to LoadAggregate.
// Check the length with:
//
//	len(mockedRepository.LoadAggregateCalls())
func (mock *RepositoryMock[TID, E, R]) LoadAggregateCalls() []struct {
	Ctx      context.Context
	Root     R
	ID       TID
	Selector version.Selector
} {
	var calls []struct {
		Ctx      context.Context
		Root     R
		ID       TID
		Selector version.Selector
	}
	mock.lockLoadAggregate.RLock()
	calls = mock.calls.LoadAggregate
	mock.lockLoadAggregate.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RepositoryMock[TID, E, R]) Save(ctx context.Context, root R) (version.Version, aggregate.CommittedEvents[E], error) {
	if mock.SaveFunc == nil {
		panic("RepositoryMock.SaveFunc: method is nil but Repository.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Root R
	}{
		Ctx:  ctx,
		Root: root,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, root)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedRepository.SaveCalls())
func (mock *RepositoryMock[TID, E, R]) SaveCalls() []struct {
	Ctx  context.Context
	Root R
} {
	var calls []struct {
		Ctx  context.Context
		Root R
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// TransactionalAggregateProcessorMock is a mock implementation of aggregate.TransactionalAggregateProcessor.
//
//	func TestSomethingThatUsesTransactionalAggregateProcessor(t *testing.T) {
//
//		// make and configure a mocked aggregate.TransactionalAggregateProcessor
//		mockedTransactionalAggregateProcessor := &TransactionalAggregateProcessorMock{
//			ProcessFunc: func(ctx context.Context, tx TX, root R, events aggregate.CommittedEvents[E]) error {
//				panic("mock out the Process method")
//			},
//		}
//
//		// use mockedTransactionalAggregateProcessor in code that requires aggregate.TransactionalAggregateProcessor
//		// and then make assertions.
//
//	}
type TransactionalAggregateProcessorMock[TX any, TID aggregate.ID, E event.Any, R aggregate.Root[TID, E]] struct {
	// ProcessFunc mocks the Process method.
	ProcessFunc func(ctx context.Context, tx TX, root R, events aggregate.CommittedEvents[E]) error

	// calls tracks calls to the methods.
	calls struct {
		// Process holds details about calls to the Process method.
		Process []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Tx is the tx argument value.
			Tx TX
			// Root is the root argument value.
			Root R
			// Events is the events argument value.
			Events aggregate.CommittedEvents[E]
		}
	}
	lockProcess sync.RWMutex
}

// Process calls ProcessFunc.
func (mock *TransactionalAggregateProcessorMock[TX, TID, E, R]) Process(ctx context.Context, tx TX, root R, events aggregate.CommittedEvents[E]) error {
	if mock.ProcessFunc == nil {
		panic("TransactionalAggregateProcessorMock.ProcessFunc: method is nil but TransactionalAggregateProcessor.Process was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Tx     TX
		Root   R
		Events aggregate.CommittedEvents[E]
	}{
		Ctx:    ctx,
		Tx:     tx,
		Root:   root,
		Events: events,
	}
	mock.lockProcess.Lock()
	mock.calls.Process = append(mock.calls.Process, callInfo)
	mock.lockProcess.Unlock()
	return mock.ProcessFunc(ctx, tx, root, events)
}

// ProcessCalls gets all the calls that were made to Process.
// Check the length with:
//
//	len(mockedTransactionalAggregateProcessor.ProcessCalls())
func (mock *TransactionalAggregateProcessorMock[TX, TID, E, R]) ProcessCalls() []struct {
	Ctx    context.Context
	Tx     TX
	Root   R
	Events aggregate.CommittedEvents[E]
} {
	var calls []struct {
		Ctx    context.Context
		Tx     TX
		Root   R
		Events aggregate.CommittedEvents[E]
	}
	mock.lockProcess.RLock()
	calls = mock.calls.Process
	mock.lockProcess.RUnlock()
	return calls
}
