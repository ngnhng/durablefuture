// Copyright 2025 Nguyen-Nhat Nguyen
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/workflow.proto

package workflowv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	v1 "durablefuture/api/workflow/v1"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkflowServiceName is the fully-qualified name of the WorkflowService service.
	WorkflowServiceName = "api.workflow.v1.WorkflowService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkflowServiceGetWorkflowsProcedure is the fully-qualified name of the WorkflowService's
	// GetWorkflows RPC.
	WorkflowServiceGetWorkflowsProcedure = "/api.workflow.v1.WorkflowService/GetWorkflows"
	// WorkflowServiceGetWorkflowHistoryProcedure is the fully-qualified name of the WorkflowService's
	// GetWorkflowHistory RPC.
	WorkflowServiceGetWorkflowHistoryProcedure = "/api.workflow.v1.WorkflowService/GetWorkflowHistory"
	// WorkflowServiceExecuteWorkflowProcedure is the fully-qualified name of the WorkflowService's
	// ExecuteWorkflow RPC.
	WorkflowServiceExecuteWorkflowProcedure = "/api.workflow.v1.WorkflowService/ExecuteWorkflow"
)

// WorkflowServiceClient is a client for the api.workflow.v1.WorkflowService service.
type WorkflowServiceClient interface {
	// GetWorkflows returns a list of all workflows
	GetWorkflows(context.Context, *connect.Request[v1.GetWorkflowsRequest]) (*connect.Response[v1.GetWorkflowsResponse], error)
	// GetWorkflowHistory returns the execution history of a specific workflow
	GetWorkflowHistory(context.Context, *connect.Request[v1.GetWorkflowHistoryRequest]) (*connect.Response[v1.GetWorkflowHistoryResponse], error)
	// ExecuteWorkflow starts a new workflow execution
	ExecuteWorkflow(context.Context, *connect.Request[v1.ExecuteWorkflowRequest]) (*connect.Response[v1.ExecuteWorkflowResponse], error)
}

// NewWorkflowServiceClient constructs a client for the api.workflow.v1.WorkflowService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkflowServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkflowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workflowServiceMethods := v1.File_api_workflow_proto.Services().ByName("WorkflowService").Methods()
	return &workflowServiceClient{
		getWorkflows: connect.NewClient[v1.GetWorkflowsRequest, v1.GetWorkflowsResponse](
			httpClient,
			baseURL+WorkflowServiceGetWorkflowsProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("GetWorkflows")),
			connect.WithClientOptions(opts...),
		),
		getWorkflowHistory: connect.NewClient[v1.GetWorkflowHistoryRequest, v1.GetWorkflowHistoryResponse](
			httpClient,
			baseURL+WorkflowServiceGetWorkflowHistoryProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("GetWorkflowHistory")),
			connect.WithClientOptions(opts...),
		),
		executeWorkflow: connect.NewClient[v1.ExecuteWorkflowRequest, v1.ExecuteWorkflowResponse](
			httpClient,
			baseURL+WorkflowServiceExecuteWorkflowProcedure,
			connect.WithSchema(workflowServiceMethods.ByName("ExecuteWorkflow")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workflowServiceClient implements WorkflowServiceClient.
type workflowServiceClient struct {
	getWorkflows       *connect.Client[v1.GetWorkflowsRequest, v1.GetWorkflowsResponse]
	getWorkflowHistory *connect.Client[v1.GetWorkflowHistoryRequest, v1.GetWorkflowHistoryResponse]
	executeWorkflow    *connect.Client[v1.ExecuteWorkflowRequest, v1.ExecuteWorkflowResponse]
}

// GetWorkflows calls api.workflow.v1.WorkflowService.GetWorkflows.
func (c *workflowServiceClient) GetWorkflows(ctx context.Context, req *connect.Request[v1.GetWorkflowsRequest]) (*connect.Response[v1.GetWorkflowsResponse], error) {
	return c.getWorkflows.CallUnary(ctx, req)
}

// GetWorkflowHistory calls api.workflow.v1.WorkflowService.GetWorkflowHistory.
func (c *workflowServiceClient) GetWorkflowHistory(ctx context.Context, req *connect.Request[v1.GetWorkflowHistoryRequest]) (*connect.Response[v1.GetWorkflowHistoryResponse], error) {
	return c.getWorkflowHistory.CallUnary(ctx, req)
}

// ExecuteWorkflow calls api.workflow.v1.WorkflowService.ExecuteWorkflow.
func (c *workflowServiceClient) ExecuteWorkflow(ctx context.Context, req *connect.Request[v1.ExecuteWorkflowRequest]) (*connect.Response[v1.ExecuteWorkflowResponse], error) {
	return c.executeWorkflow.CallUnary(ctx, req)
}

// WorkflowServiceHandler is an implementation of the api.workflow.v1.WorkflowService service.
type WorkflowServiceHandler interface {
	// GetWorkflows returns a list of all workflows
	GetWorkflows(context.Context, *connect.Request[v1.GetWorkflowsRequest]) (*connect.Response[v1.GetWorkflowsResponse], error)
	// GetWorkflowHistory returns the execution history of a specific workflow
	GetWorkflowHistory(context.Context, *connect.Request[v1.GetWorkflowHistoryRequest]) (*connect.Response[v1.GetWorkflowHistoryResponse], error)
	// ExecuteWorkflow starts a new workflow execution
	ExecuteWorkflow(context.Context, *connect.Request[v1.ExecuteWorkflowRequest]) (*connect.Response[v1.ExecuteWorkflowResponse], error)
}

// NewWorkflowServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkflowServiceHandler(svc WorkflowServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workflowServiceMethods := v1.File_api_workflow_proto.Services().ByName("WorkflowService").Methods()
	workflowServiceGetWorkflowsHandler := connect.NewUnaryHandler(
		WorkflowServiceGetWorkflowsProcedure,
		svc.GetWorkflows,
		connect.WithSchema(workflowServiceMethods.ByName("GetWorkflows")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceGetWorkflowHistoryHandler := connect.NewUnaryHandler(
		WorkflowServiceGetWorkflowHistoryProcedure,
		svc.GetWorkflowHistory,
		connect.WithSchema(workflowServiceMethods.ByName("GetWorkflowHistory")),
		connect.WithHandlerOptions(opts...),
	)
	workflowServiceExecuteWorkflowHandler := connect.NewUnaryHandler(
		WorkflowServiceExecuteWorkflowProcedure,
		svc.ExecuteWorkflow,
		connect.WithSchema(workflowServiceMethods.ByName("ExecuteWorkflow")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.workflow.v1.WorkflowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkflowServiceGetWorkflowsProcedure:
			workflowServiceGetWorkflowsHandler.ServeHTTP(w, r)
		case WorkflowServiceGetWorkflowHistoryProcedure:
			workflowServiceGetWorkflowHistoryHandler.ServeHTTP(w, r)
		case WorkflowServiceExecuteWorkflowProcedure:
			workflowServiceExecuteWorkflowHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkflowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkflowServiceHandler struct{}

func (UnimplementedWorkflowServiceHandler) GetWorkflows(context.Context, *connect.Request[v1.GetWorkflowsRequest]) (*connect.Response[v1.GetWorkflowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.workflow.v1.WorkflowService.GetWorkflows is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) GetWorkflowHistory(context.Context, *connect.Request[v1.GetWorkflowHistoryRequest]) (*connect.Response[v1.GetWorkflowHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.workflow.v1.WorkflowService.GetWorkflowHistory is not implemented"))
}

func (UnimplementedWorkflowServiceHandler) ExecuteWorkflow(context.Context, *connect.Request[v1.ExecuteWorkflowRequest]) (*connect.Response[v1.ExecuteWorkflowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.workflow.v1.WorkflowService.ExecuteWorkflow is not implemented"))
}
